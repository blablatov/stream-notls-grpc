// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blablatov/stream-notls-grpc/proto (interfaces: OrderManagementClient)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	__ "github.com/blablatov/stream-notls-grpc/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// MockOrderManagementClient is a mock of OrderManagementClient interface.
type MockOrderManagementClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrderManagementClientMockRecorder
}

// MockOrderManagementClientMockRecorder is the mock recorder for MockOrderManagementClient.
type MockOrderManagementClientMockRecorder struct {
	mock *MockOrderManagementClient
}

// NewMockOrderManagementClient creates a new mock instance.
func NewMockOrderManagementClient(ctrl *gomock.Controller) *MockOrderManagementClient {
	mock := &MockOrderManagementClient{ctrl: ctrl}
	mock.recorder = &MockOrderManagementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderManagementClient) EXPECT() *MockOrderManagementClientMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrderManagementClient) AddOrder(arg0 context.Context, arg1 *__.Order, arg2 ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddOrder", varargs...)
	ret0, _ := ret[0].(*wrapperspb.StringValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrderManagementClientMockRecorder) AddOrder(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrderManagementClient)(nil).AddOrder), varargs...)
}

// GetOrder mocks base method.
func (m *MockOrderManagementClient) GetOrder(arg0 context.Context, arg1 *wrapperspb.StringValue, arg2 ...grpc.CallOption) (*__.Order, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrder", varargs...)
	ret0, _ := ret[0].(*__.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderManagementClientMockRecorder) GetOrder(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderManagementClient)(nil).GetOrder), varargs...)
}

// ProcessOrders mocks base method.
func (m *MockOrderManagementClient) ProcessOrders(arg0 context.Context, arg1 ...grpc.CallOption) (__.OrderManagement_ProcessOrdersClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessOrders", varargs...)
	ret0, _ := ret[0].(__.OrderManagement_ProcessOrdersClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessOrders indicates an expected call of ProcessOrders.
func (mr *MockOrderManagementClientMockRecorder) ProcessOrders(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrders", reflect.TypeOf((*MockOrderManagementClient)(nil).ProcessOrders), varargs...)
}

// SearchOrders mocks base method.
func (m *MockOrderManagementClient) SearchOrders(arg0 context.Context, arg1 *wrapperspb.StringValue, arg2 ...grpc.CallOption) (__.OrderManagement_SearchOrdersClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchOrders", varargs...)
	ret0, _ := ret[0].(__.OrderManagement_SearchOrdersClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchOrders indicates an expected call of SearchOrders.
func (mr *MockOrderManagementClientMockRecorder) SearchOrders(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchOrders", reflect.TypeOf((*MockOrderManagementClient)(nil).SearchOrders), varargs...)
}

// UpdateOrders mocks base method.
func (m *MockOrderManagementClient) UpdateOrders(arg0 context.Context, arg1 ...grpc.CallOption) (__.OrderManagement_UpdateOrdersClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrders", varargs...)
	ret0, _ := ret[0].(__.OrderManagement_UpdateOrdersClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrders indicates an expected call of UpdateOrders.
func (mr *MockOrderManagementClientMockRecorder) UpdateOrders(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrders", reflect.TypeOf((*MockOrderManagementClient)(nil).UpdateOrders), varargs...)
}
